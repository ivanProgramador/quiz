Na pasta model tem a classe questão e a classe resposta
Na pasta Api tem dois serviços um fornece as perguntas eo outro eo questionário 
As perguntas vem do arquivo banco de questões que esta sendo importado para dentro
do serviço questões que faz a leitura do arquivo e retorna os dados organizados como 
objetos

fluxo de um questão
A classe quuestão model representa uma questão com os traibutos necessários 
o arquivo banco de questoes aciona essa classe e cria instancias dela nesse caso 
eu criei um array que possui objetos que perntencem a classe de questões  

---------------------------------------------------------------------------------------
const questoes: QuestaoModel[] = [
    
    new QuestaoModel(306,'Qual bicho transmite a Doença de chagas ?',[

        RespostaModel.errada('Abelha'),
        RespostaModel.errada('Barata'),
        RespostaModel.errada('Pulga'),
        RespostaModel.certa('Barbeiro'),
    ]),
    new QuestaoModel(306,'Qual fruto é conhecido no Norte Nordeste como jerimum  ?',[

        RespostaModel.errada('Caju'),
        RespostaModel.errada('Côco'),
        RespostaModel.errada('chuchu'),
        RespostaModel.certa('Abobora'),
    ])


]

export default questoes 




--------------------------------------------------------------------------------------

então onde eu quiser ler essas questões basta que eu importe o arquivo, que é o caso da api 
e quando algum requisita esses dados alem de enviar o array de questões eu tenho que converter essas 
questões para objeto literal para que a api possa retornar. 
cada classe tanto questão como reposta tem o seu método de conversão.   

import questoes from '../bancoDeQuestoes'


export default (req,res)=>{
        
     res.status(200).json(questoes[0].converterParaObjeto());
}


-------------------------------------------------------------------------------------------------------
Ebaralhamento de itens isso é necessário neste projeto porque se o usuario souber
onde fica a resposta certa isso vai comprimenter a ideia central do sistema então um função 
será criada.

entendendo o embaralhamento

supondo que eu tenho um array com 4 itens 

numeros=[301,302,303,304]

eu posso usar a função map dos arry para fazer um loop nos seus indices se são 
4 indices e a acada vez que esse loop executar ele cria um objeto literal que tem 
2 informações 

1 - o valor do numero
2 - a variável aleatório(eu fixei o valor 1 por isso serão 4 variáveis com o mesmo valor) 

numeros.map(num=>{numeros:num,aleatorio=1})

para embaralhar eu preciso usar uma função que gere numeros aleatórios nisso ao inves de receber o valor
1 a minha variável aleatorio vai executar a função Math.random() que vai gerar um valor aleatório pra ela 
cada vez que ela for gerada ou seja eu vou ter 4 numeros aleatorios 

numeros.map(num=>{numeros:num,aleatorio:Math.random})

Ordenando os numeros aleatórios 

Quando eu uso o sort depois de gerar esses resultados ele vai gerar 2 objetos que tem 2 atributos 

1 - num 
2 - aleatorio 

se são objetos diferentes eles tem atributos diferentes também inclusive os numero aleatórios
então pego somente o valor aleatrio de cada um deles e subtraio o numero do objeto 1 pelo numero do objeto 2 
gerando um ordenação crescente 

numeros.map(num=>{numeros:num,aleatorio:Math.random}).sort((obj1,obj2) => ob1.aleatorio - obj2.aleatorio)

depois de fazer isso eu faço um map que vai trazer os numeros ordenados de forma aleatória

numeros.map(num=>{numeros:num,aleatorio:Math.random}).sort((obj1,obj2) => ob1.aleatorio - obj2.aleatorio).map(obj=>obj.valor)

assim eu recupero o mesmo array so que ordenado com base no numero aleatorio que criei 

DEPLOY CONCLUIDO NA VERCEL CLOUD

















